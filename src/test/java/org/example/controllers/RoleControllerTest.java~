package org.example.controllers;

import org.example.dtos.RoleDTO;
import org.example.services.RoleService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

class RoleControllerTest {

    @Mock
    private RoleService roleService;

    @InjectMocks
    private RoleController roleController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    @DisplayName("Create a Role")
    void createRole() {
        String roleName = "admin";
        String description = "do stuff";

        RoleDTO mockRoleDTO = new RoleDTO();
        mockRoleDTO.setRoleName(roleName);
        mockRoleDTO.setDescription(description);

        when(roleService.createRole(roleName, description)).thenReturn(mockRoleDTO);

        ResponseEntity<RoleDTO> response = roleController.createRole(mockRoleDTO);

        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(mockRoleDTO, response.getBody());

        verify(roleService).createRole(roleName, description);
    }

    @Test
    @DisplayName("Get a Role by ID")
    void getRoleById() {
        int roleId = 1;
        String roleName = "admin";
        String description = "do stuff";

        RoleDTO mockRoleDTO = new RoleDTO();
        mockRoleDTO.setRoleName(roleName);
        mockRoleDTO.setDescription(description);

        when(roleService.getRoleById(roleId)).thenReturn(mockRoleDTO);
        ResponseEntity<RoleDTO> response = roleController.getRoleById(roleId);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockRoleDTO, response.getBody());
        verify(roleService).getRoleById(roleId);
    }

    @Test
    @DisplayName("Get all Roles")
    void getAllRoles() {
        String roleName1 = "admin";
        String description1 = "do stuff";

        String roleName2 = "user";
        String description2 = "use stuff";

        RoleDTO mockRoleDTO1 = new RoleDTO();
        mockRoleDTO1.setRoleName(roleName1);
        mockRoleDTO1.setDescription(description1);

        RoleDTO mockRoleDTO2 = new RoleDTO();
        mockRoleDTO2.setRoleName(roleName2);
        mockRoleDTO2.setDescription(description2);

        List<RoleDTO> listRolesDTO = new ArrayList<>();
        listRolesDTO.add(mockRoleDTO1);
        listRolesDTO.add(mockRoleDTO2);

        when(roleService.getAllRoles()).thenReturn(listRolesDTO);

        List<RoleDTO> listRoleDTOs = new ArrayList<>();
        listRoleDTOs.add(mockRoleDTO1);
        listRoleDTOs.add(mockRoleDTO2);

        ResponseEntity<ArrayList<RoleDTO>> response = roleController.getAllRoles();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(listRoleDTOs, response.getBody());

        verify(roleService).getAllRoles();
    }

    @Test
    @DisplayName("Update a Role by ID")
    void updateRoleById() {
        int roleId = 1;
        String roleName = "admin";
        String description = "do stuff";

        RoleDTO mockRoleDTO = new RoleDTO();
        mockRoleDTO.setRoleName(roleName);
        mockRoleDTO.setDescription(description);

        when(roleService.updateRoleById(roleId, roleName, description)).thenReturn(mockRoleDTO);

        ResponseEntity<RoleDTO> response = roleController.updateRoleById(roleId, mockRoleDTO);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockRoleDTO, response.getBody());
    }

    @Test
    @DisplayName("Delete a Role by ID")
    void deleteRoleById() {
        int roleId = 1;
        ResponseEntity<Void> response = roleController.deleteRoleById(roleId);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        verify(roleService).deleteRoleById(roleId);
    }

    //    @Test
    //    @DisplayName("Assign a Role to a User")
    //    void assignRoleToUser() {
    //        int userId = 1;
    //        String login = "admin";
    //        String password = "password";
    //        User mockUser = new User(userId, login, password);
    //
    //        int roleId = 1;
    //        String roleName = "admin";
    //        String description = "manage stuff";
    //        RoleDTO mockRoleDTO = new RoleDTO();
    //        mockRoleDTO.setRoleName(roleName);
    //        mockRoleDTO.setDescription(description);
    //        mockRoleDTO.setUsers(new ArrayList<>(List.of(mockUser)));
    //
    //        when(roleService.getRoleById(roleId)).thenReturn(mockRoleDTO);
    //
    //        ResponseEntity<RoleDTO> response = usersRolesController.assignRoleToUser(userId, roleId);
    //
    //        assertEquals(HttpStatus.OK, response.getStatusCode());
    //        assertEquals(mockRoleDTO, response.getBody());
    //    }
    //}
}